#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ScoreBoard.AppCode
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="DB_8261_scorebored")]
	public partial class ScoreDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertZ_SB_BOARD(Z_SB_BOARD instance);
    partial void UpdateZ_SB_BOARD(Z_SB_BOARD instance);
    partial void DeleteZ_SB_BOARD(Z_SB_BOARD instance);
    #endregion
		
		public ScoreDataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DB_8261_scoreboredConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ScoreDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ScoreDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ScoreDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ScoreDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Z_SB_BOARD> Z_SB_BOARDs
		{
			get
			{
				return this.GetTable<Z_SB_BOARD>();
			}
		}
		
		[Function(Name="dbo.spSearch")]
		public int spSearch([Parameter(DbType="NVarChar(256)")] string searchString, [Parameter(DbType="Int")] System.Nullable<int> top)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), searchString, top);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.searchBored", IsComposable=true)]
		public IQueryable<Z_SB_BOARD> searchBored([Parameter(Name="string", DbType="NVarChar(256)")] string @string, [Parameter(DbType="Int")] System.Nullable<int> top)
		{
			return this.CreateMethodCallQuery<Z_SB_BOARD>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), @string, top);
		}
	}
	
	[Table(Name="dbo.Z_SB_BOARD")]
	public partial class Z_SB_BOARD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _UserId;
		
		private string _NAME;
		
		private string _DESCRIPTION;
		
		private System.DateTime _DT_CREATED;
		
		private string _PRO_NAME;
		
		private string _CON_NAME;
		
		private bool _IS_PHRASE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnDESCRIPTIONChanging(string value);
    partial void OnDESCRIPTIONChanged();
    partial void OnDT_CREATEDChanging(System.DateTime value);
    partial void OnDT_CREATEDChanged();
    partial void OnPRO_NAMEChanging(string value);
    partial void OnPRO_NAMEChanged();
    partial void OnCON_NAMEChanging(string value);
    partial void OnCON_NAMEChanged();
    partial void OnIS_PHRASEChanging(bool value);
    partial void OnIS_PHRASEChanged();
    #endregion
		
		public Z_SB_BOARD()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_NAME", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[Column(Storage="_DESCRIPTION", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string DESCRIPTION
		{
			get
			{
				return this._DESCRIPTION;
			}
			set
			{
				if ((this._DESCRIPTION != value))
				{
					this.OnDESCRIPTIONChanging(value);
					this.SendPropertyChanging();
					this._DESCRIPTION = value;
					this.SendPropertyChanged("DESCRIPTION");
					this.OnDESCRIPTIONChanged();
				}
			}
		}
		
		[Column(Storage="_DT_CREATED", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DT_CREATED
		{
			get
			{
				return this._DT_CREATED;
			}
			set
			{
				if ((this._DT_CREATED != value))
				{
					this.OnDT_CREATEDChanging(value);
					this.SendPropertyChanging();
					this._DT_CREATED = value;
					this.SendPropertyChanged("DT_CREATED");
					this.OnDT_CREATEDChanged();
				}
			}
		}
		
		[Column(Storage="_PRO_NAME", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string PRO_NAME
		{
			get
			{
				return this._PRO_NAME;
			}
			set
			{
				if ((this._PRO_NAME != value))
				{
					this.OnPRO_NAMEChanging(value);
					this.SendPropertyChanging();
					this._PRO_NAME = value;
					this.SendPropertyChanged("PRO_NAME");
					this.OnPRO_NAMEChanged();
				}
			}
		}
		
		[Column(Storage="_CON_NAME", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string CON_NAME
		{
			get
			{
				return this._CON_NAME;
			}
			set
			{
				if ((this._CON_NAME != value))
				{
					this.OnCON_NAMEChanging(value);
					this.SendPropertyChanging();
					this._CON_NAME = value;
					this.SendPropertyChanged("CON_NAME");
					this.OnCON_NAMEChanged();
				}
			}
		}
		
		[Column(Storage="_IS_PHRASE", DbType="Bit NOT NULL")]
		public bool IS_PHRASE
		{
			get
			{
				return this._IS_PHRASE;
			}
			set
			{
				if ((this._IS_PHRASE != value))
				{
					this.OnIS_PHRASEChanging(value);
					this.SendPropertyChanging();
					this._IS_PHRASE = value;
					this.SendPropertyChanged("IS_PHRASE");
					this.OnIS_PHRASEChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
